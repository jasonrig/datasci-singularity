Bootstrap: docker
From: ubuntu:18.04
Stage: build

%environment
   export SPARK_HOME=/opt/spark-2.4.3-bin-hadoop2.7
   export PATH=$PATH:$SPARK_HOME/bin:/usr/local/cuda/bin
   export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
   export PYSPARK_DRIVER_PYTHON="jupyter"
   export PYSPARK_DRIVER_PYTHON_OPTS="notebook"
   export PYSPARK_PYTHON=python3

%post
   # Basic setup
   export DEBIAN_FRONTEND=noninteractive
   apt update
   apt upgrade -y
   apt install -y wget gnupg
   # NVIDIA CUDA setup
   wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
   dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
   apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
   apt update
   wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
   apt install -y ./nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
   apt-get update
   apt install -y --no-install-recommends \
    cuda-10-0 \
    libcudnn7=7.6.0.64-1+cuda10.0  \
    libcudnn7-dev=7.6.0.64-1+cuda10.0
   rm cuda-repo-ubuntu1804_10.0.130-1_amd64.deb nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
   # Install useful utilities
   apt install -y nano vim emacs
   # Install graphviz for pydot
   apt install -y graphviz
   # Install OpenMPI for CNTK
   apt install -y openmpi-bin
   # Python setup
   apt install -y python3-pip
   # Java and Scala setup (for Spark)
   apt install -y openjdk-8-jre-headless scala

   # Spark installation
   wget https://www-eu.apache.org/dist/spark/spark-2.4.3/spark-2.4.3-bin-hadoop2.7.tgz
   wget https://www-eu.apache.org/dist/spark/spark-2.4.3/spark-2.4.3-bin-hadoop2.7.tgz.asc
   wget https://www.apache.org/dist/spark/KEYS
   gpg --import KEYS
   gpg --verify spark-2.4.3-bin-hadoop2.7.tgz.asc spark-2.4.3-bin-hadoop2.7.tgz || exit 1
   tar -C /opt/ -zxvf spark-2.4.3-bin-hadoop2.7.tgz
   cd /opt/spark-2.4.3-bin-hadoop2.7/python
   python3 setup.py sdist
   pip3 install dist/*.tar.gz
   cd -
   rm spark-2.4.3-bin-hadoop2.7.tgz spark-2.4.3-bin-hadoop2.7.tgz.asc KEYS

   # Install OpenCV
   wget https://github.com/opencv/opencv/archive/4.1.0.tar.gz
   tar -zxvf 4.1.0.tar.gz && rm 4.1.0.tar.gz
   wget https://github.com/opencv/opencv_contrib/archive/4.1.0.tar.gz
   tar -zxvf 4.1.0.tar.gz && rm 4.1.0.tar.gz
   apt install -y \
     build-essential \
     gfortran \
     cmake \
     libhdf5-dev \
     libjpeg-dev \
     libpng-dev \
     libtiff-dev \
     libavcodec-dev \
     libavformat-dev \
     libswscale-dev \
     libv4l-dev \
     libxvidcore-dev \
     libx264-dev \
     libgtk-3-dev \
     libopenblas-dev \
     python3-dev
   mkdir opencv-4.1.0/build && cd opencv-4.1.0/build/
   pip3 install numpy
   export NUMCPUS=`grep -c '^processor' /proc/cpuinfo`
   # Note: WITH_NVCUVID=OFF set as advised here: https://github.com/opencv/opencv/issues/13897#issuecomment-510013198
   cmake \
     -D CMAKE_BUILD_TYPE=RELEASE \
     -D CMAKE_INSTALL_PREFIX=/usr/local \
     -D WITH_CUDA=ON \
     -D ENABLE_FAST_MATH=1 \
     -D CUDA_FAST_MATH=1 \
     -D WITH_CUBLAS=1 \
     -D WITH_NVCUVID=OFF \
     -D INSTALL_PYTHON_EXAMPLES=ON \
     -D INSTALL_C_EXAMPLES=OFF \
     -D OPENCV_ENABLE_NONFREE=ON \
     -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.0/modules \
     -D PYTHON_EXECUTABLE=python3 \
     -D BUILD_EXAMPLES=ON .. && make -j$NUMCPUS install
   cd -
   rm -R opencv-4.1.0 opencv_contrib-4.1.0

   # Python package installation
   # General data import, wrangling and numerical processing
   pip3 install \
     jupyter \
     jupyterlab \
     toree \
     scipy \
     pandas \
     beautifulsoup4 \
     scrapy
   jupyter toree install --spark_home=/opt/spark-2.4.3-bin-hadoop2.7/ --interpreters=Scala,PySpark,SQL
   # Visualisation
   pip3 install \
     matplotlib \
     seaborn \
     plotly \
     bokeh \
     altair \
     pygal \
     pydot \
   # Machine learning
   pip3 install \
     tensorflow-gpu==2.0.0-beta1 \
     tensorflow-hub \
     tensor2tensor \
     dm-sonnet \
     cntk-gpu \
     mxnet-cu100mkl \
     gluoncv \
     statsmodels \
     xgboost \
     scikit-learn
   # NLP tools
   pip3 install \
     nltk \
     spacy \
     gensim \
     fasttext \
     gluonnlp
   # Machine learning (PyTorch)
   pip3 install https://download.pytorch.org/whl/cu100/torch-1.1.0-cp36-cp36m-linux_x86_64.whl
   pip3 install https://download.pytorch.org/whl/cu100/torchvision-0.3.0-cp36-cp36m-linux_x86_64.whl

   rm -R /root/.cache
   apt clean
   rm -rf /var/lib/apt/lists/*
